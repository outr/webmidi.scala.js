{"version":3,"names":[],"mappings":"","sources":["WebMIDIAPI.min.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],2:[function(require,module,exports){\n'use strict';Object.defineProperty(exports,\"__esModule\",{value:true});var _midi_access=require('./midi/midi_access');var _util=require('./util/util');/* eslint wrap-iife: [\"error\", \"any\"] */var midiAccess=void 0;var init=function init(){if(!navigator.requestMIDIAccess){(0,_util.polyfill)();navigator.requestMIDIAccess=function(){// singleton-ish, no need to create multiple instances of MIDIAccess\nif(midiAccess===undefined){midiAccess=(0,_midi_access.createMIDIAccess)();}return midiAccess;};if((0,_util.getDevice)().nodejs===true){navigator.close=function(){// Need to close MIDI input ports, otherwise Node.js will wait for MIDI input forever.\n(0,_midi_access.closeAllMIDIInputs)();};}}};init();// export for use with node\nexports.default=init;\n\n},{\"./midi/midi_access\":3,\"./util/util\":10}],3:[function(require,module,exports){\n'use strict';Object.defineProperty(exports,\"__esModule\",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();/*\n  Creates a MIDIAccess instance:\n  - Creates MIDIInput and MIDIOutput instances for the initially connected MIDI devices.\n  - Keeps track of newly connected devices and creates the necessary instances of MIDIInput and MIDIOutput.\n  - Keeps track of disconnected devices and removes them from the inputs and/or outputs map.\n  - Creates a unique id for every device and stores these ids by the name of the device:\n    so when a device gets disconnected and reconnected again, it will still have the same id. This\n    is in line with the behavior of the native MIDIAccess object.\n\n*/exports.createMIDIAccess=createMIDIAccess;exports.dispatchEvent=dispatchEvent;exports.closeAllMIDIInputs=closeAllMIDIInputs;exports.getMIDIDeviceId=getMIDIDeviceId;var _midi_input=require('./midi_input');var _midi_input2=_interopRequireDefault(_midi_input);var _midi_output=require('./midi_output');var _midi_output2=_interopRequireDefault(_midi_output);var _midiconnection_event=require('./midiconnection_event');var _midiconnection_event2=_interopRequireDefault(_midiconnection_event);var _jazz_instance=require('../util/jazz_instance');var _util=require('../util/util');var _store=require('../util/store');var _store2=_interopRequireDefault(_store);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}var midiAccess=void 0;var jazzInstance=void 0;var midiInputs=new _store2.default();var midiOutputs=new _store2.default();var midiInputIds=new _store2.default();var midiOutputIds=new _store2.default();var listeners=new _store2.default();var MIDIAccess=function(){function MIDIAccess(midiInputs,midiOutputs){_classCallCheck(this,MIDIAccess);this.sysexEnabled=true;this.inputs=midiInputs;this.outputs=midiOutputs;}_createClass(MIDIAccess,[{key:'addEventListener',value:function addEventListener(type,listener,useCapture){if(type!=='statechange'){return;}if(listeners.has(listener)===false){listeners.add(listener);}}},{key:'removeEventListener',value:function removeEventListener(type,listener,useCapture){if(type!=='statechange'){return;}if(listeners.has(listener)===true){listeners.delete(listener);}}}]);return MIDIAccess;}();function createMIDIAccess(){return new Promise(function(resolve,reject){if(midiAccess!==undefined){resolve(midiAccess);return;}if((0,_util.getDevice)().browser==='ie9'){reject({message:'WebMIDIAPIShim supports Internet Explorer 10 and above.'});return;}(0,_jazz_instance.createJazzInstance)(function(instance){if(instance===undefined){reject({message:'No access to MIDI devices: browser does not support the WebMIDI API and the Jazz plugin is not installed.'});return;}jazzInstance=instance;createMIDIPorts(function(){setupListeners();midiAccess=new MIDIAccess(midiInputs,midiOutputs);resolve(midiAccess);});});});}// create MIDIInput and MIDIOutput instances for all initially connected MIDI devices\nfunction createMIDIPorts(callback){var inputs=jazzInstance.MidiInList();var outputs=jazzInstance.MidiOutList();var numInputs=inputs.length;var numOutputs=outputs.length;loopCreateMIDIPort(0,numInputs,'input',inputs,function(){loopCreateMIDIPort(0,numOutputs,'output',outputs,callback);});}function loopCreateMIDIPort(index,max,type,list,callback){if(index<max){var name=list[index++];createMIDIPort(type,name,function(){loopCreateMIDIPort(index,max,type,list,callback);});}else{callback();}}function createMIDIPort(type,name,callback){(0,_jazz_instance.getJazzInstance)(type,function(instance){var port=void 0;var info=[name,'',''];if(type==='input'){if(instance.Support('MidiInInfo')){info=instance.MidiInInfo(name);}port=new _midi_input2.default(info,instance);midiInputs.set(port.id,port);}else if(type==='output'){if(instance.Support('MidiOutInfo')){info=instance.MidiOutInfo(name);}port=new _midi_output2.default(info,instance);midiOutputs.set(port.id,port);}callback(port);});}// lookup function: Jazz gives us the name of the connected/disconnected MIDI devices but we have stored them by id\nfunction getPortByName(ports,name){var port=void 0;var values=ports.values();for(var i=0;i<values.length;i+=1){port=values[i];if(port.name===name){break;}}return port;}// keep track of connected/disconnected MIDI devices\nfunction setupListeners(){jazzInstance.OnDisconnectMidiIn(function(name){var port=getPortByName(midiInputs,name);if(port!==undefined){port.state='disconnected';port.close();port._jazzInstance.inputInUse=false;midiInputs.delete(port.id);dispatchEvent(port);}});jazzInstance.OnDisconnectMidiOut(function(name){var port=getPortByName(midiOutputs,name);if(port!==undefined){port.state='disconnected';port.close();port._jazzInstance.outputInUse=false;midiOutputs.delete(port.id);dispatchEvent(port);}});jazzInstance.OnConnectMidiIn(function(name){createMIDIPort('input',name,function(port){dispatchEvent(port);});});jazzInstance.OnConnectMidiOut(function(name){createMIDIPort('output',name,function(port){dispatchEvent(port);});});}// when a device gets connected/disconnected both the port and MIDIAccess dispatch a MIDIConnectionEvent\n// therefor we call the ports dispatchEvent function here as well\nfunction dispatchEvent(port){port.dispatchEvent(new _midiconnection_event2.default(port,port));var evt=new _midiconnection_event2.default(midiAccess,port);if(typeof midiAccess.onstatechange==='function'){midiAccess.onstatechange(evt);}listeners.forEach(function(listener){return listener(evt);});}function closeAllMIDIInputs(){midiInputs.forEach(function(input){// input.close();\ninput._jazzInstance.MidiInClose();});}// check if we have already created a unique id for this device, if so: reuse it, if not: create a new id and store it\nfunction getMIDIDeviceId(name,type){var id=void 0;if(type==='input'){id=midiInputIds.get(name);if(id===undefined){id=(0,_util.generateUUID)();midiInputIds.set(name,id);}}else if(type==='output'){id=midiOutputIds.get(name);if(id===undefined){id=(0,_util.generateUUID)();midiOutputIds.set(name,id);}}return id;}\n\n},{\"../util/jazz_instance\":8,\"../util/store\":9,\"../util/util\":10,\"./midi_input\":4,\"./midi_output\":5,\"./midiconnection_event\":6}],4:[function(require,module,exports){\n'use strict';Object.defineProperty(exports,\"__esModule\",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();/* eslint prefer-destructuring: 0 *//* eslint no-underscore-dangle: 0 *//* eslint no-bitwise: 0 *//* eslint func-names: 0 *//*\n  MIDIInput is a wrapper around an input of a Jazz instance\n*/var _midimessage_event=require('./midimessage_event');var _midimessage_event2=_interopRequireDefault(_midimessage_event);var _midiconnection_event=require('./midiconnection_event');var _midiconnection_event2=_interopRequireDefault(_midiconnection_event);var _midi_access=require('./midi_access');var _util=require('../util/util');var _store=require('../util/store');var _store2=_interopRequireDefault(_store);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}var midiProc=void 0;var nodejs=(0,_util.getDevice)().nodejs;var MIDIInput=function(){function MIDIInput(info,instance){_classCallCheck(this,MIDIInput);this.id=(0,_midi_access.getMIDIDeviceId)(info[0],'input');this.name=info[0];this.manufacturer=info[1];this.version=info[2];this.type='input';this.state='connected';this.connection='pending';this.onstatechange=null;this._onmidimessage=null;// because we need to implicitly open the device when an onmidimessage handler gets added\n// we define a setter that opens the device if the set value is a function\nObject.defineProperty(this,'onmidimessage',{set:function set(value){this._onmidimessage=value;if(typeof value==='function'){this.open();}}});this._listeners=new _store2.default().set('midimessage',new _store2.default()).set('statechange',new _store2.default());this._inLongSysexMessage=false;this._sysexBuffer=new Uint8Array();this._jazzInstance=instance;this._jazzInstance.inputInUse=true;// on Linux opening and closing Jazz instances causes the plugin to crash a lot so we open\n// the device here and don't close it when close() is called, see below\nif((0,_util.getDevice)().platform==='linux'){this._jazzInstance.MidiInOpen(this.name,midiProc.bind(this));}}_createClass(MIDIInput,[{key:'addEventListener',value:function addEventListener(type,listener,useCapture){var listeners=this._listeners.get(type);if(listeners===undefined){return;}if(listeners.has(listener)===false){listeners.add(listener);}}},{key:'removeEventListener',value:function removeEventListener(type,listener,useCapture){var listeners=this._listeners.get(type);if(listeners===undefined){return;}if(listeners.has(listener)===false){listeners.delete(listener);}}},{key:'dispatchEvent',value:function dispatchEvent(evt){var listeners=this._listeners.get(evt.type);listeners.forEach(function(listener){listener(evt);});if(evt.type==='midimessage'){if(this._onmidimessage!==null){this._onmidimessage(evt);}}else if(evt.type==='statechange'){if(this.onstatechange!==null){this.onstatechange(evt);}}}},{key:'open',value:function open(){if(this.connection==='open'){return;}if((0,_util.getDevice)().platform!=='linux'){this._jazzInstance.MidiInOpen(this.name,midiProc.bind(this));}this.connection='open';(0,_midi_access.dispatchEvent)(this);// dispatch MIDIConnectionEvent via MIDIAccess\n}},{key:'close',value:function close(){if(this.connection==='closed'){return;}if((0,_util.getDevice)().platform!=='linux'){this._jazzInstance.MidiInClose();}this.connection='closed';(0,_midi_access.dispatchEvent)(this);// dispatch MIDIConnectionEvent via MIDIAccess\nthis._onmidimessage=null;this.onstatechange=null;this._listeners.get('midimessage').clear();this._listeners.get('statechange').clear();}},{key:'_appendToSysexBuffer',value:function _appendToSysexBuffer(data){var oldLength=this._sysexBuffer.length;var tmpBuffer=new Uint8Array(oldLength+data.length);tmpBuffer.set(this._sysexBuffer);tmpBuffer.set(data,oldLength);this._sysexBuffer=tmpBuffer;}},{key:'_bufferLongSysex',value:function _bufferLongSysex(data,initialOffset){var j=initialOffset;while(j<data.length){if(data[j]==0xF7){// end of sysex!\nj+=1;this._appendToSysexBuffer(data.slice(initialOffset,j));return j;}j+=1;}// didn't reach the end; just tack it on.\nthis._appendToSysexBuffer(data.slice(initialOffset,j));this._inLongSysexMessage=true;return j;}}]);return MIDIInput;}();exports.default=MIDIInput;midiProc=function midiProc(timestamp,data){var length=0;var i=void 0;var isSysexMessage=false;// Jazz sometimes passes us multiple messages at once, so we need to parse them out and pass them one at a time.\nfor(i=0;i<data.length;i+=length){var isValidMessage=true;if(this._inLongSysexMessage){i=this._bufferLongSysex(data,i);if(data[i-1]!=0xf7){// ran off the end without hitting the end of the sysex message\nreturn;}isSysexMessage=true;}else{isSysexMessage=false;switch(data[i]&0xF0){case 0x00:// Chew up spurious 0x00 bytes.  Fixes a Windows problem.\nlength=1;isValidMessage=false;break;case 0x80:// note off\ncase 0x90:// note on\ncase 0xA0:// polyphonic aftertouch\ncase 0xB0:// control change\ncase 0xE0:// channel mode\nlength=3;break;case 0xC0:// program change\ncase 0xD0:// channel aftertouch\nlength=2;break;case 0xF0:switch(data[i]){case 0xf0:// letiable-length sysex.\ni=this._bufferLongSysex(data,i);if(data[i-1]!=0xf7){// ran off the end without hitting the end of the sysex message\nreturn;}isSysexMessage=true;break;case 0xF1:// MTC quarter frame\ncase 0xF3:// song select\nlength=2;break;case 0xF2:// song position pointer\nlength=3;break;default:length=1;break;}break;}}if(!isValidMessage){continue;}var evt={};evt.receivedTime=parseFloat(timestamp.toString())+this._jazzInstance._perfTimeZero;if(isSysexMessage||this._inLongSysexMessage){evt.data=new Uint8Array(this._sysexBuffer);this._sysexBuffer=new Uint8Array(0);this._inLongSysexMessage=false;}else{evt.data=new Uint8Array(data.slice(i,length+i));}if(nodejs){if(this._onmidimessage){this._onmidimessage(evt);}}else{var e=new _midimessage_event2.default(this,evt.data,evt.receivedTime);this.dispatchEvent(e);}}};\n\n},{\"../util/store\":9,\"../util/util\":10,\"./midi_access\":3,\"./midiconnection_event\":6,\"./midimessage_event\":7}],5:[function(require,module,exports){\n'use strict';Object.defineProperty(exports,\"__esModule\",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();/* eslint prefer-destructuring: 0 *//* eslint no-underscore-dangle: 0 *//*\n  MIDIOutput is a wrapper around an output of a Jazz instance\n*/var _util=require('../util/util');var _store=require('../util/store');var _store2=_interopRequireDefault(_store);var _midi_access=require('./midi_access');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}var MIDIOutput=function(){function MIDIOutput(info,instance){_classCallCheck(this,MIDIOutput);this.id=(0,_midi_access.getMIDIDeviceId)(info[0],'output');this.name=info[0];this.manufacturer=info[1];this.version=info[2];this.type='output';this.state='connected';this.connection='pending';this.onmidimessage=null;this.onstatechange=null;this._listeners=new _store2.default();this._inLongSysexMessage=false;this._sysexBuffer=new Uint8Array();this._jazzInstance=instance;this._jazzInstance.outputInUse=true;if((0,_util.getDevice)().platform==='linux'){this._jazzInstance.MidiOutOpen(this.name);}}_createClass(MIDIOutput,[{key:'open',value:function open(){if(this.connection==='open'){return;}if((0,_util.getDevice)().platform!=='linux'){this._jazzInstance.MidiOutOpen(this.name);}this.connection='open';(0,_midi_access.dispatchEvent)(this);// dispatch MIDIConnectionEvent via MIDIAccess\n}},{key:'close',value:function close(){if(this.connection==='closed'){return;}if((0,_util.getDevice)().platform!=='linux'){this._jazzInstance.MidiOutClose();}this.connection='closed';(0,_midi_access.dispatchEvent)(this);// dispatch MIDIConnectionEvent via MIDIAccess\nthis.onstatechange=null;this._listeners.clear();}},{key:'send',value:function send(data,timestamp){var _this=this;var delayBeforeSend=0;if(data.length===0){return false;}if(timestamp){delayBeforeSend=Math.floor(timestamp-performance.now());}if(timestamp&&delayBeforeSend>1){setTimeout(function(){_this._jazzInstance.MidiOutLong(data);},delayBeforeSend);}else{this._jazzInstance.MidiOutLong(data);}return true;}},{key:'clear',value:function clear(){// to be implemented\n}},{key:'addEventListener',value:function addEventListener(type,listener,useCapture){if(type!=='statechange'){return;}if(this._listeners.has(listener)===false){this._listeners.add(listener);}}},{key:'removeEventListener',value:function removeEventListener(type,listener,useCapture){if(type!=='statechange'){return;}if(this._listeners.has(listener)===false){this._listeners.delete(listener);}}},{key:'dispatchEvent',value:function dispatchEvent(evt){this._listeners.forEach(function(listener){listener(evt);});if(this.onstatechange!==null){this.onstatechange(evt);}}}]);return MIDIOutput;}();exports.default=MIDIOutput;\n\n},{\"../util/store\":9,\"../util/util\":10,\"./midi_access\":3}],6:[function(require,module,exports){\n'use strict';Object.defineProperty(exports,\"__esModule\",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}var MIDIConnectionEvent=function MIDIConnectionEvent(midiAccess,port){_classCallCheck(this,MIDIConnectionEvent);this.bubbles=false;this.cancelBubble=false;this.cancelable=false;this.currentTarget=midiAccess;this.defaultPrevented=false;this.eventPhase=0;this.path=[];this.port=port;this.returnValue=true;this.srcElement=midiAccess;this.target=midiAccess;this.timeStamp=Date.now();this.type='statechange';};exports.default=MIDIConnectionEvent;\n\n},{}],7:[function(require,module,exports){\n'use strict';Object.defineProperty(exports,\"__esModule\",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}var MIDIMessageEvent=function MIDIMessageEvent(port,data,receivedTime){_classCallCheck(this,MIDIMessageEvent);this.bubbles=false;this.cancelBubble=false;this.cancelable=false;this.currentTarget=port;this.data=data;this.defaultPrevented=false;this.eventPhase=0;this.path=[];this.receivedTime=receivedTime;this.returnValue=true;this.srcElement=port;this.target=port;this.timeStamp=Date.now();this.type='midimessage';};exports.default=MIDIMessageEvent;\n\n},{}],8:[function(require,module,exports){\n'use strict';Object.defineProperty(exports,\"__esModule\",{value:true});exports.createJazzInstance=createJazzInstance;exports.getJazzInstance=getJazzInstance;var _store=require('./store');var _store2=_interopRequireDefault(_store);var _util=require('./util');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}/* eslint no-underscore-dangle: 0 *//*\n  Creates instances of the Jazz plugin if necessary. Initially the MIDIAccess creates one main Jazz instance that is used\n  to query all initially connected devices, and to track the devices that are being connected or disconnected at runtime.\n\n  For every MIDIInput and MIDIOutput that is created, MIDIAccess queries the getJazzInstance() method for a Jazz instance\n  that still have an available input or output. Because Jazz only allows one input and one output per instance, we\n  need to create new instances if more than one MIDI input or output device gets connected.\n\n  Note that an existing Jazz instance doesn't get deleted when both its input and output device are disconnected; instead it\n  will be reused if a new device gets connected.\n*/var jazzPluginInitTime=100;// milliseconds\nvar jazzInstanceNumber=0;var jazzInstances=new _store2.default();function createJazzInstance(callback){var id='jazz_'+jazzInstanceNumber+'_'+Date.now();jazzInstanceNumber+=1;var objRef=void 0;var activeX=void 0;if((0,_util.getDevice)().nodejs===true){// jazzMidi is added to the global var navigator in the node environment\nobjRef=new navigator.jazzMidi.MIDI();}else{/*\n            generate this html:\n\n            <object id=\"Jazz1\" classid=\"CLSID:1ACE1618-1C7D-4561-AEE1-34842AA85E90\" class=\"hidden\">\n                <object id=\"Jazz2\" type=\"audio/x-jazz\" class=\"hidden\">\n                    <p style=\"visibility:visible;\">This page requires <a href=http://jazz-soft.net>Jazz-Plugin</a> ...</p>\n                </object>\n            </object>\n        */activeX=document.createElement('object');activeX.id=id+'ie';activeX.classid='CLSID:1ACE1618-1C7D-4561-AEE1-34842AA85E90';objRef=document.createElement('object');objRef.id=id;objRef.type='audio/x-jazz';activeX.appendChild(objRef);var p=document.createElement('p');p.appendChild(document.createTextNode('This page requires the '));var a=document.createElement('a');a.appendChild(document.createTextNode('Jazz plugin'));a.href='http://jazz-soft.net/';p.appendChild(a);p.appendChild(document.createTextNode('.'));objRef.appendChild(p);var insertionPoint=document.getElementById('MIDIPlugin');if(!insertionPoint){// Create hidden element\ninsertionPoint=document.createElement('div');insertionPoint.id='MIDIPlugin';insertionPoint.style.position='absolute';insertionPoint.style.visibility='hidden';insertionPoint.style.left='-9999px';insertionPoint.style.top='-9999px';document.body.appendChild(insertionPoint);}insertionPoint.appendChild(activeX);}setTimeout(function(){var instance=null;if(objRef.isJazz===true){instance=objRef;}else if(activeX.isJazz===true){instance=activeX;}if(instance!==null){instance._perfTimeZero=performance.now();jazzInstances.set(jazzInstanceNumber,instance);}callback(instance);},jazzPluginInitTime);}function getJazzInstance(type,callback){var key=type==='input'?'inputInUse':'outputInUse';var instance=null;var values=jazzInstances.values();for(var i=0;i<values.length;i+=1){var inst=values[i];if(inst[key]!==true){instance=inst;break;}}if(instance===null){createJazzInstance(callback);}else{callback(instance);}}\n\n},{\"./store\":9,\"./util\":10}],9:[function(require,module,exports){\n\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}var idIndex=0;var Store=function(){function Store(){_classCallCheck(this,Store);this.store={};this.keys=[];}_createClass(Store,[{key:\"add\",value:function add(obj){var id=\"\"+new Date().getTime()+idIndex;idIndex+=1;this.keys.push(id);this.store[id]=obj;}},{key:\"set\",value:function set(id,obj){this.keys.push(id);this.store[id]=obj;return this;}},{key:\"get\",value:function get(id){return this.store[id];}},{key:\"has\",value:function has(id){return this.keys.indexOf(id)!==-1;}},{key:\"delete\",value:function _delete(id){delete this.store[id];var index=this.keys.indexOf(id);if(index>-1){this.keys.splice(index,1);}return this;}},{key:\"values\",value:function values(){var elements=[];var l=this.keys.length;for(var i=0;i<l;i+=1){var element=this.store[this.keys[i]];elements.push(element);}return elements;}},{key:\"forEach\",value:function forEach(cb){var l=this.keys.length;for(var i=0;i<l;i+=1){var element=this.store[this.keys[i]];cb(element);}}},{key:\"clear\",value:function clear(){this.keys=[];this.store={};}}]);return Store;}();exports.default=Store;\n\n},{}],10:[function(require,module,exports){\n(function (process,global){\n'use strict';Object.defineProperty(exports,\"__esModule\",{value:true});exports.getDevice=getDevice;exports.polyfillPerformance=polyfillPerformance;exports.generateUUID=generateUUID;exports.polyfillPromise=polyfillPromise;exports.polyfill=polyfill;/* eslint no-param-reassign: 0 *//* eslint no-bitwise: 0 *//* eslint no-mixed-operators: 0 */var Scope=void 0;var device=null;var getScope=function getScope(){if(typeof Scope!=='undefined'){return Scope;}Scope=null;if(typeof window!=='undefined'){Scope=window;}else if(typeof global!=='undefined'){Scope=global;}// console.log('scope', scope);\nreturn Scope;};// check on what type of device we are running, note that in this context\n// a device is a computer not a MIDI device\nfunction getDevice(){var scope=getScope();if(device!==null){return device;}var platform='undetected';var browser='undetected';if(scope.navigator.node===true){device={platform:process.platform,nodejs:true,mobile:platform==='ios'||platform==='android'};return device;}var ua=scope.navigator.userAgent;if(ua.match(/(iPad|iPhone|iPod)/g)){platform='ios';}else if(ua.indexOf('Android')!==-1){platform='android';}else if(ua.indexOf('Linux')!==-1){platform='linux';}else if(ua.indexOf('Macintosh')!==-1){platform='osx';}else if(ua.indexOf('Windows')!==-1){platform='windows';}if(ua.indexOf('Chrome')!==-1){// chrome, chromium and canary\nbrowser='chrome';if(ua.indexOf('OPR')!==-1){browser='opera';}else if(ua.indexOf('Chromium')!==-1){browser='chromium';}}else if(ua.indexOf('Safari')!==-1){browser='safari';}else if(ua.indexOf('Firefox')!==-1){browser='firefox';}else if(ua.indexOf('Trident')!==-1){browser='ie';if(ua.indexOf('MSIE 9')!==-1){browser='ie9';}}if(platform==='ios'){if(ua.indexOf('CriOS')!==-1){browser='chrome';}}device={platform:platform,browser:browser,mobile:platform==='ios'||platform==='android',nodejs:false};return device;}function polyfillPerformance(){var scope=getScope();if(typeof scope.performance==='undefined'){scope.performance={};}Date.now=Date.now||function(){return new Date().getTime();};if(typeof scope.performance.now==='undefined'){var nowOffset=Date.now();if(typeof scope.performance.timing!=='undefined'&&typeof scope.performance.timing.navigationStart!=='undefined'){nowOffset=scope.performance.timing.navigationStart;}scope.performance.now=function now(){return Date.now()-nowOffset;};}}function generateUUID(){var d=new Date().getTime();var uuid=new Array(64).join('x');// 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';\nuuid=uuid.replace(/[xy]/g,function(c){var r=(d+Math.random()*16)%16|0;d=Math.floor(d/16);return(c==='x'?r:r&0x3|0x8).toString(16).toUpperCase();});return uuid;}// a very simple implementation of a Promise for Internet Explorer and Nodejs\nfunction polyfillPromise(){var scope=getScope();if(typeof scope.Promise!=='function'){scope.Promise=function promise(executor){this.executor=executor;};scope.Promise.prototype.then=function then(resolve,reject){if(typeof resolve!=='function'){resolve=function resolve(){};}if(typeof reject!=='function'){reject=function reject(){};}this.executor(resolve,reject);};}}function polyfill(){var d=getDevice();// console.log(device);\nif(d.browser==='ie'||d.nodejs===true){polyfillPromise();}polyfillPerformance();}\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"_process\":1}]},{},[2])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwic3JjL2luZGV4LmpzIiwic3JjL21pZGkvbWlkaV9hY2Nlc3MuanMiLCJzcmMvbWlkaS9taWRpX2lucHV0LmpzIiwic3JjL21pZGkvbWlkaV9vdXRwdXQuanMiLCJzcmMvbWlkaS9taWRpY29ubmVjdGlvbl9ldmVudC5qcyIsInNyYy9taWRpL21pZGltZXNzYWdlX2V2ZW50LmpzIiwic3JjL3V0aWwvamF6el9pbnN0YW5jZS5qcyIsInNyYy91dGlsL3N0b3JlLmpzIiwic3JjL3V0aWwvdXRpbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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LEdBQWEsSUFBdkMsQ0FBNkMsQ0FDekMsa0JBQ0gsQ0FDRCxzQkFDSCIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiLyogZXNsaW50IHdyYXAtaWlmZTogW1wiZXJyb3JcIiwgXCJhbnlcIl0gKi9cblxuaW1wb3J0IHsgY3JlYXRlTUlESUFjY2VzcywgY2xvc2VBbGxNSURJSW5wdXRzIH0gZnJvbSAnLi9taWRpL21pZGlfYWNjZXNzJztcbmltcG9ydCB7IHBvbHlmaWxsLCBnZXREZXZpY2UgfSBmcm9tICcuL3V0aWwvdXRpbCc7XG5cbmxldCBtaWRpQWNjZXNzO1xuXG5jb25zdCBpbml0ID0gKCkgPT4ge1xuICAgIGlmICghbmF2aWdhdG9yLnJlcXVlc3RNSURJQWNjZXNzKSB7XG4gICAgICAgIHBvbHlmaWxsKCk7XG4gICAgICAgIG5hdmlnYXRvci5yZXF1ZXN0TUlESUFjY2VzcyA9ICgpID0+IHtcbiAgICAgICAgICAgIC8vIHNpbmdsZXRvbi1pc2gsIG5vIG5lZWQgdG8gY3JlYXRlIG11bHRpcGxlIGluc3RhbmNlcyBvZiBNSURJQWNjZXNzXG4gICAgICAgICAgICBpZiAobWlkaUFjY2VzcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbWlkaUFjY2VzcyA9IGNyZWF0ZU1JRElBY2Nlc3MoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtaWRpQWNjZXNzO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoZ2V0RGV2aWNlKCkubm9kZWpzID09PSB0cnVlKSB7XG4gICAgICAgICAgICBuYXZpZ2F0b3IuY2xvc2UgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gTmVlZCB0byBjbG9zZSBNSURJIGlucHV0IHBvcnRzLCBvdGhlcndpc2UgTm9kZS5qcyB3aWxsIHdhaXQgZm9yIE1JREkgaW5wdXQgZm9yZXZlci5cbiAgICAgICAgICAgICAgICBjbG9zZUFsbE1JRElJbnB1dHMoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5pbml0KCk7XG4vLyBleHBvcnQgZm9yIHVzZSB3aXRoIG5vZGVcbmV4cG9ydCBkZWZhdWx0IGluaXQ7XG4iLCIvKlxuICBDcmVhdGVzIGEgTUlESUFjY2VzcyBpbnN0YW5jZTpcbiAgLSBDcmVhdGVzIE1JRElJbnB1dCBhbmQgTUlESU91dHB1dCBpbnN0YW5jZXMgZm9yIHRoZSBpbml0aWFsbHkgY29ubmVjdGVkIE1JREkgZGV2aWNlcy5cbiAgLSBLZWVwcyB0cmFjayBvZiBuZXdseSBjb25uZWN0ZWQgZGV2aWNlcyBhbmQgY3JlYXRlcyB0aGUgbmVjZXNzYXJ5IGluc3RhbmNlcyBvZiBNSURJSW5wdXQgYW5kIE1JRElPdXRwdXQuXG4gIC0gS2VlcHMgdHJhY2sgb2YgZGlzY29ubmVjdGVkIGRldmljZXMgYW5kIHJlbW92ZXMgdGhlbSBmcm9tIHRoZSBpbnB1dHMgYW5kL29yIG91dHB1dHMgbWFwLlxuICAtIENyZWF0ZXMgYSB1bmlxdWUgaWQgZm9yIGV2ZXJ5IGRldmljZSBhbmQgc3RvcmVzIHRoZXNlIGlkcyBieSB0aGUgbmFtZSBvZiB0aGUgZGV2aWNlOlxuICAgIHNvIHdoZW4gYSBkZXZpY2UgZ2V0cyBkaXNjb25uZWN0ZWQgYW5kIHJlY29ubmVjdGVkIGFnYWluLCBpdCB3aWxsIHN0aWxsIGhhdmUgdGhlIHNhbWUgaWQuIFRoaXNcbiAgICBpcyBpbiBsaW5lIHdpdGggdGhlIGJlaGF2aW9yIG9mIHRoZSBuYXRpdmUgTUlESUFjY2VzcyBvYmplY3QuXG5cbiovXG5cbmltcG9ydCBNSURJSW5wdXQgZnJvbSAnLi9taWRpX2lucHV0JztcbmltcG9ydCBNSURJT3V0cHV0IGZyb20gJy4vbWlkaV9vdXRwdXQnO1xuaW1wb3J0IE1JRElDb25uZWN0aW9uRXZlbnQgZnJvbSAnLi9taWRpY29ubmVjdGlvbl9ldmVudCc7XG5pbXBvcnQgeyBjcmVhdGVKYXp6SW5zdGFuY2UsIGdldEphenpJbnN0YW5jZSB9IGZyb20gJy4uL3V0aWwvamF6el9pbnN0YW5jZSc7XG5pbXBvcnQgeyBnZXREZXZpY2UsIGdlbmVyYXRlVVVJRCB9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgU3RvcmUgZnJvbSAnLi4vdXRpbC9zdG9yZSc7XG5cbmxldCBtaWRpQWNjZXNzO1xubGV0IGphenpJbnN0YW5jZTtcbmNvbnN0IG1pZGlJbnB1dHMgPSBuZXcgU3RvcmUoKTtcbmNvbnN0IG1pZGlPdXRwdXRzID0gbmV3IFN0b3JlKCk7XG5jb25zdCBtaWRpSW5wdXRJZHMgPSBuZXcgU3RvcmUoKTtcbmNvbnN0IG1pZGlPdXRwdXRJZHMgPSBuZXcgU3RvcmUoKTtcbmNvbnN0IGxpc3RlbmVycyA9IG5ldyBTdG9yZSgpO1xuXG5jbGFzcyBNSURJQWNjZXNzIHtcbiAgICBjb25zdHJ1Y3RvcihtaWRpSW5wdXRzLCBtaWRpT3V0cHV0cykge1xuICAgICAgICB0aGlzLnN5c2V4RW5hYmxlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuaW5wdXRzID0gbWlkaUlucHV0cztcbiAgICAgICAgdGhpcy5vdXRwdXRzID0gbWlkaU91dHB1dHM7XG4gICAgfVxuXG4gICAgYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgdXNlQ2FwdHVyZSkge1xuICAgICAgICBpZiAodHlwZSAhPT0gJ3N0YXRlY2hhbmdlJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaXN0ZW5lcnMuaGFzKGxpc3RlbmVyKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGxpc3RlbmVycy5hZGQobGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgdXNlQ2FwdHVyZSkge1xuICAgICAgICBpZiAodHlwZSAhPT0gJ3N0YXRlY2hhbmdlJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaXN0ZW5lcnMuaGFzKGxpc3RlbmVyKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgbGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU1JRElBY2Nlc3MoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKCgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGlmIChtaWRpQWNjZXNzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlc29sdmUobWlkaUFjY2Vzcyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZ2V0RGV2aWNlKCkuYnJvd3NlciA9PT0gJ2llOScpIHtcbiAgICAgICAgICAgIHJlamVjdCh7IG1lc3NhZ2U6ICdXZWJNSURJQVBJU2hpbSBzdXBwb3J0cyBJbnRlcm5ldCBFeHBsb3JlciAxMCBhbmQgYWJvdmUuJyB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNyZWF0ZUphenpJbnN0YW5jZSgoaW5zdGFuY2UpID0+IHtcbiAgICAgICAgICAgIGlmIChpbnN0YW5jZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KHsgbWVzc2FnZTogJ05vIGFjY2VzcyB0byBNSURJIGRldmljZXM6IGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB0aGUgV2ViTUlESSBBUEkgYW5kIHRoZSBKYXp6IHBsdWdpbiBpcyBub3QgaW5zdGFsbGVkLicgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBqYXp6SW5zdGFuY2UgPSBpbnN0YW5jZTtcblxuICAgICAgICAgICAgY3JlYXRlTUlESVBvcnRzKCgpID0+IHtcbiAgICAgICAgICAgICAgICBzZXR1cExpc3RlbmVycygpO1xuICAgICAgICAgICAgICAgIG1pZGlBY2Nlc3MgPSBuZXcgTUlESUFjY2VzcyhtaWRpSW5wdXRzLCBtaWRpT3V0cHV0cyk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShtaWRpQWNjZXNzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KSk7XG59XG5cblxuLy8gY3JlYXRlIE1JRElJbnB1dCBhbmQgTUlESU91dHB1dCBpbnN0YW5jZXMgZm9yIGFsbCBpbml0aWFsbHkgY29ubmVjdGVkIE1JREkgZGV2aWNlc1xuZnVuY3Rpb24gY3JlYXRlTUlESVBvcnRzKGNhbGxiYWNrKSB7XG4gICAgY29uc3QgaW5wdXRzID0gamF6ekluc3RhbmNlLk1pZGlJbkxpc3QoKTtcbiAgICBjb25zdCBvdXRwdXRzID0gamF6ekluc3RhbmNlLk1pZGlPdXRMaXN0KCk7XG4gICAgY29uc3QgbnVtSW5wdXRzID0gaW5wdXRzLmxlbmd0aDtcbiAgICBjb25zdCBudW1PdXRwdXRzID0gb3V0cHV0cy5sZW5ndGg7XG5cbiAgICBsb29wQ3JlYXRlTUlESVBvcnQoMCwgbnVtSW5wdXRzLCAnaW5wdXQnLCBpbnB1dHMsICgpID0+IHtcbiAgICAgICAgbG9vcENyZWF0ZU1JRElQb3J0KDAsIG51bU91dHB1dHMsICdvdXRwdXQnLCBvdXRwdXRzLCBjYWxsYmFjayk7XG4gICAgfSk7XG59XG5cblxuZnVuY3Rpb24gbG9vcENyZWF0ZU1JRElQb3J0KGluZGV4LCBtYXgsIHR5cGUsIGxpc3QsIGNhbGxiYWNrKSB7XG4gICAgaWYgKGluZGV4IDwgbWF4KSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBsaXN0W2luZGV4KytdO1xuICAgICAgICBjcmVhdGVNSURJUG9ydCh0eXBlLCBuYW1lLCAoKSA9PiB7XG4gICAgICAgICAgICBsb29wQ3JlYXRlTUlESVBvcnQoaW5kZXgsIG1heCwgdHlwZSwgbGlzdCwgY2FsbGJhY2spO1xuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgIH1cbn1cblxuXG5mdW5jdGlvbiBjcmVhdGVNSURJUG9ydCh0eXBlLCBuYW1lLCBjYWxsYmFjaykge1xuICAgIGdldEphenpJbnN0YW5jZSh0eXBlLCAoaW5zdGFuY2UpID0+IHtcbiAgICAgICAgbGV0IHBvcnQ7XG4gICAgICAgIGxldCBpbmZvID0gW25hbWUsICcnLCAnJ107XG4gICAgICAgIGlmICh0eXBlID09PSAnaW5wdXQnKSB7XG4gICAgICAgICAgICBpZiAoaW5zdGFuY2UuU3VwcG9ydCgnTWlkaUluSW5mbycpKSB7XG4gICAgICAgICAgICAgICAgaW5mbyA9IGluc3RhbmNlLk1pZGlJbkluZm8obmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwb3J0ID0gbmV3IE1JRElJbnB1dChpbmZvLCBpbnN0YW5jZSk7XG4gICAgICAgICAgICBtaWRpSW5wdXRzLnNldChwb3J0LmlkLCBwb3J0KTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnb3V0cHV0Jykge1xuICAgICAgICAgICAgaWYgKGluc3RhbmNlLlN1cHBvcnQoJ01pZGlPdXRJbmZvJykpIHtcbiAgICAgICAgICAgICAgICBpbmZvID0gaW5zdGFuY2UuTWlkaU91dEluZm8obmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwb3J0ID0gbmV3IE1JRElPdXRwdXQoaW5mbywgaW5zdGFuY2UpO1xuICAgICAgICAgICAgbWlkaU91dHB1dHMuc2V0KHBvcnQuaWQsIHBvcnQpO1xuICAgICAgICB9XG4gICAgICAgIGNhbGxiYWNrKHBvcnQpO1xuICAgIH0pO1xufVxuXG5cbi8vIGxvb2t1cCBmdW5jdGlvbjogSmF6eiBnaXZlcyB1cyB0aGUgbmFtZSBvZiB0aGUgY29ubmVjdGVkL2Rpc2Nvbm5lY3RlZCBNSURJIGRldmljZXMgYnV0IHdlIGhhdmUgc3RvcmVkIHRoZW0gYnkgaWRcbmZ1bmN0aW9uIGdldFBvcnRCeU5hbWUocG9ydHMsIG5hbWUpIHtcbiAgICBsZXQgcG9ydDtcbiAgICBjb25zdCB2YWx1ZXMgPSBwb3J0cy52YWx1ZXMoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBwb3J0ID0gdmFsdWVzW2ldO1xuICAgICAgICBpZiAocG9ydC5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcG9ydDtcbn1cblxuXG4vLyBrZWVwIHRyYWNrIG9mIGNvbm5lY3RlZC9kaXNjb25uZWN0ZWQgTUlESSBkZXZpY2VzXG5mdW5jdGlvbiBzZXR1cExpc3RlbmVycygpIHtcbiAgICBqYXp6SW5zdGFuY2UuT25EaXNjb25uZWN0TWlkaUluKChuYW1lKSA9PiB7XG4gICAgICAgIGNvbnN0IHBvcnQgPSBnZXRQb3J0QnlOYW1lKG1pZGlJbnB1dHMsIG5hbWUpO1xuICAgICAgICBpZiAocG9ydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwb3J0LnN0YXRlID0gJ2Rpc2Nvbm5lY3RlZCc7XG4gICAgICAgICAgICBwb3J0LmNsb3NlKCk7XG4gICAgICAgICAgICBwb3J0Ll9qYXp6SW5zdGFuY2UuaW5wdXRJblVzZSA9IGZhbHNlO1xuICAgICAgICAgICAgbWlkaUlucHV0cy5kZWxldGUocG9ydC5pZCk7XG4gICAgICAgICAgICBkaXNwYXRjaEV2ZW50KHBvcnQpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBqYXp6SW5zdGFuY2UuT25EaXNjb25uZWN0TWlkaU91dCgobmFtZSkgPT4ge1xuICAgICAgICBjb25zdCBwb3J0ID0gZ2V0UG9ydEJ5TmFtZShtaWRpT3V0cHV0cywgbmFtZSk7XG4gICAgICAgIGlmIChwb3J0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHBvcnQuc3RhdGUgPSAnZGlzY29ubmVjdGVkJztcbiAgICAgICAgICAgIHBvcnQuY2xvc2UoKTtcbiAgICAgICAgICAgIHBvcnQuX2phenpJbnN0YW5jZS5vdXRwdXRJblVzZSA9IGZhbHNlO1xuICAgICAgICAgICAgbWlkaU91dHB1dHMuZGVsZXRlKHBvcnQuaWQpO1xuICAgICAgICAgICAgZGlzcGF0Y2hFdmVudChwb3J0KTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgamF6ekluc3RhbmNlLk9uQ29ubmVjdE1pZGlJbigobmFtZSkgPT4ge1xuICAgICAgICBjcmVhdGVNSURJUG9ydCgnaW5wdXQnLCBuYW1lLCAocG9ydCkgPT4ge1xuICAgICAgICAgICAgZGlzcGF0Y2hFdmVudChwb3J0KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBqYXp6SW5zdGFuY2UuT25Db25uZWN0TWlkaU91dCgobmFtZSkgPT4ge1xuICAgICAgICBjcmVhdGVNSURJUG9ydCgnb3V0cHV0JywgbmFtZSwgKHBvcnQpID0+IHtcbiAgICAgICAgICAgIGRpc3BhdGNoRXZlbnQocG9ydCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG5cbi8vIHdoZW4gYSBkZXZpY2UgZ2V0cyBjb25uZWN0ZWQvZGlzY29ubmVjdGVkIGJvdGggdGhlIHBvcnQgYW5kIE1JRElBY2Nlc3MgZGlzcGF0Y2ggYSBNSURJQ29ubmVjdGlvbkV2ZW50XG4vLyB0aGVyZWZvciB3ZSBjYWxsIHRoZSBwb3J0cyBkaXNwYXRjaEV2ZW50IGZ1bmN0aW9uIGhlcmUgYXMgd2VsbFxuZXhwb3J0IGZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQocG9ydCkge1xuICAgIHBvcnQuZGlzcGF0Y2hFdmVudChuZXcgTUlESUNvbm5lY3Rpb25FdmVudChwb3J0LCBwb3J0KSk7XG5cbiAgICBjb25zdCBldnQgPSBuZXcgTUlESUNvbm5lY3Rpb25FdmVudChtaWRpQWNjZXNzLCBwb3J0KTtcblxuICAgIGlmICh0eXBlb2YgbWlkaUFjY2Vzcy5vbnN0YXRlY2hhbmdlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG1pZGlBY2Nlc3Mub25zdGF0ZWNoYW5nZShldnQpO1xuICAgIH1cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChsaXN0ZW5lciA9PiBsaXN0ZW5lcihldnQpKTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gY2xvc2VBbGxNSURJSW5wdXRzKCkge1xuICAgIG1pZGlJbnB1dHMuZm9yRWFjaCgoaW5wdXQpID0+IHtcbiAgICAgICAgLy8gaW5wdXQuY2xvc2UoKTtcbiAgICAgICAgaW5wdXQuX2phenpJbnN0YW5jZS5NaWRpSW5DbG9zZSgpO1xuICAgIH0pO1xufVxuXG5cbi8vIGNoZWNrIGlmIHdlIGhhdmUgYWxyZWFkeSBjcmVhdGVkIGEgdW5pcXVlIGlkIGZvciB0aGlzIGRldmljZSwgaWYgc286IHJldXNlIGl0LCBpZiBub3Q6IGNyZWF0ZSBhIG5ldyBpZCBhbmQgc3RvcmUgaXRcbmV4cG9ydCBmdW5jdGlvbiBnZXRNSURJRGV2aWNlSWQobmFtZSwgdHlwZSkge1xuICAgIGxldCBpZDtcbiAgICBpZiAodHlwZSA9PT0gJ2lucHV0Jykge1xuICAgICAgICBpZCA9IG1pZGlJbnB1dElkcy5nZXQobmFtZSk7XG4gICAgICAgIGlmIChpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZCA9IGdlbmVyYXRlVVVJRCgpO1xuICAgICAgICAgICAgbWlkaUlucHV0SWRzLnNldChuYW1lLCBpZCk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdvdXRwdXQnKSB7XG4gICAgICAgIGlkID0gbWlkaU91dHB1dElkcy5nZXQobmFtZSk7XG4gICAgICAgIGlmIChpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZCA9IGdlbmVyYXRlVVVJRCgpO1xuICAgICAgICAgICAgbWlkaU91dHB1dElkcy5zZXQobmFtZSwgaWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpZDtcbn1cblxuIiwiLyogZXNsaW50IHByZWZlci1kZXN0cnVjdHVyaW5nOiAwICovXG4vKiBlc2xpbnQgbm8tdW5kZXJzY29yZS1kYW5nbGU6IDAgKi9cbi8qIGVzbGludCBuby1iaXR3aXNlOiAwICovXG4vKiBlc2xpbnQgZnVuYy1uYW1lczogMCAqL1xuXG4vKlxuICBNSURJSW5wdXQgaXMgYSB3cmFwcGVyIGFyb3VuZCBhbiBpbnB1dCBvZiBhIEphenogaW5zdGFuY2VcbiovXG5cbmltcG9ydCBNSURJTWVzc2FnZUV2ZW50IGZyb20gJy4vbWlkaW1lc3NhZ2VfZXZlbnQnO1xuaW1wb3J0IE1JRElDb25uZWN0aW9uRXZlbnQgZnJvbSAnLi9taWRpY29ubmVjdGlvbl9ldmVudCc7XG5pbXBvcnQgeyBkaXNwYXRjaEV2ZW50LCBnZXRNSURJRGV2aWNlSWQgfSBmcm9tICcuL21pZGlfYWNjZXNzJztcbmltcG9ydCB7IGdldERldmljZSB9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgU3RvcmUgZnJvbSAnLi4vdXRpbC9zdG9yZSc7XG5cbmxldCBtaWRpUHJvYztcbmNvbnN0IG5vZGVqcyA9IGdldERldmljZSgpLm5vZGVqcztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTUlESUlucHV0IHtcbiAgICBjb25zdHJ1Y3RvcihpbmZvLCBpbnN0YW5jZSkge1xuICAgICAgICB0aGlzLmlkID0gZ2V0TUlESURldmljZUlkKGluZm9bMF0sICdpbnB1dCcpO1xuICAgICAgICB0aGlzLm5hbWUgPSBpbmZvWzBdO1xuICAgICAgICB0aGlzLm1hbnVmYWN0dXJlciA9IGluZm9bMV07XG4gICAgICAgIHRoaXMudmVyc2lvbiA9IGluZm9bMl07XG4gICAgICAgIHRoaXMudHlwZSA9ICdpbnB1dCc7XG4gICAgICAgIHRoaXMuc3RhdGUgPSAnY29ubmVjdGVkJztcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gJ3BlbmRpbmcnO1xuXG4gICAgICAgIHRoaXMub25zdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX29ubWlkaW1lc3NhZ2UgPSBudWxsO1xuICAgICAgICAvLyBiZWNhdXNlIHdlIG5lZWQgdG8gaW1wbGljaXRseSBvcGVuIHRoZSBkZXZpY2Ugd2hlbiBhbiBvbm1pZGltZXNzYWdlIGhhbmRsZXIgZ2V0cyBhZGRlZFxuICAgICAgICAvLyB3ZSBkZWZpbmUgYSBzZXR0ZXIgdGhhdCBvcGVucyB0aGUgZGV2aWNlIGlmIHRoZSBzZXQgdmFsdWUgaXMgYSBmdW5jdGlvblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ29ubWlkaW1lc3NhZ2UnLCB7XG4gICAgICAgICAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vbm1pZGltZXNzYWdlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wZW4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLl9saXN0ZW5lcnMgPSBuZXcgU3RvcmUoKS5zZXQoJ21pZGltZXNzYWdlJywgbmV3IFN0b3JlKCkpLnNldCgnc3RhdGVjaGFuZ2UnLCBuZXcgU3RvcmUoKSk7XG4gICAgICAgIHRoaXMuX2luTG9uZ1N5c2V4TWVzc2FnZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9zeXNleEJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KCk7XG5cbiAgICAgICAgdGhpcy5famF6ekluc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgICAgIHRoaXMuX2phenpJbnN0YW5jZS5pbnB1dEluVXNlID0gdHJ1ZTtcblxuICAgICAgICAvLyBvbiBMaW51eCBvcGVuaW5nIGFuZCBjbG9zaW5nIEphenogaW5zdGFuY2VzIGNhdXNlcyB0aGUgcGx1Z2luIHRvIGNyYXNoIGEgbG90IHNvIHdlIG9wZW5cbiAgICAgICAgLy8gdGhlIGRldmljZSBoZXJlIGFuZCBkb24ndCBjbG9zZSBpdCB3aGVuIGNsb3NlKCkgaXMgY2FsbGVkLCBzZWUgYmVsb3dcbiAgICAgICAgaWYgKGdldERldmljZSgpLnBsYXRmb3JtID09PSAnbGludXgnKSB7XG4gICAgICAgICAgICB0aGlzLl9qYXp6SW5zdGFuY2UuTWlkaUluT3Blbih0aGlzLm5hbWUsIG1pZGlQcm9jLmJpbmQodGhpcykpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgdXNlQ2FwdHVyZSkge1xuICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnMuZ2V0KHR5cGUpO1xuICAgICAgICBpZiAobGlzdGVuZXJzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0ZW5lcnMuaGFzKGxpc3RlbmVyKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGxpc3RlbmVycy5hZGQobGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgdXNlQ2FwdHVyZSkge1xuICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnMuZ2V0KHR5cGUpO1xuICAgICAgICBpZiAobGlzdGVuZXJzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0ZW5lcnMuaGFzKGxpc3RlbmVyKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGxpc3RlbmVycy5kZWxldGUobGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGlzcGF0Y2hFdmVudChldnQpIHtcbiAgICAgICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzLmdldChldnQudHlwZSk7XG4gICAgICAgIGxpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcikgPT4ge1xuICAgICAgICAgICAgbGlzdGVuZXIoZXZ0KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGV2dC50eXBlID09PSAnbWlkaW1lc3NhZ2UnKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fb25taWRpbWVzc2FnZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX29ubWlkaW1lc3NhZ2UoZXZ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChldnQudHlwZSA9PT0gJ3N0YXRlY2hhbmdlJykge1xuICAgICAgICAgICAgaWYgKHRoaXMub25zdGF0ZWNoYW5nZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMub25zdGF0ZWNoYW5nZShldnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgb3BlbigpIHtcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvbiA9PT0gJ29wZW4nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdldERldmljZSgpLnBsYXRmb3JtICE9PSAnbGludXgnKSB7XG4gICAgICAgICAgICB0aGlzLl9qYXp6SW5zdGFuY2UuTWlkaUluT3Blbih0aGlzLm5hbWUsIG1pZGlQcm9jLmJpbmQodGhpcykpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbiA9ICdvcGVuJztcbiAgICAgICAgZGlzcGF0Y2hFdmVudCh0aGlzKTsgLy8gZGlzcGF0Y2ggTUlESUNvbm5lY3Rpb25FdmVudCB2aWEgTUlESUFjY2Vzc1xuICAgIH1cblxuICAgIGNsb3NlKCkge1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uID09PSAnY2xvc2VkJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChnZXREZXZpY2UoKS5wbGF0Zm9ybSAhPT0gJ2xpbnV4Jykge1xuICAgICAgICAgICAgdGhpcy5famF6ekluc3RhbmNlLk1pZGlJbkNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gJ2Nsb3NlZCc7XG4gICAgICAgIGRpc3BhdGNoRXZlbnQodGhpcyk7IC8vIGRpc3BhdGNoIE1JRElDb25uZWN0aW9uRXZlbnQgdmlhIE1JRElBY2Nlc3NcbiAgICAgICAgdGhpcy5fb25taWRpbWVzc2FnZSA9IG51bGw7XG4gICAgICAgIHRoaXMub25zdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVycy5nZXQoJ21pZGltZXNzYWdlJykuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzLmdldCgnc3RhdGVjaGFuZ2UnKS5jbGVhcigpO1xuICAgIH1cblxuICAgIF9hcHBlbmRUb1N5c2V4QnVmZmVyKGRhdGEpIHtcbiAgICAgICAgY29uc3Qgb2xkTGVuZ3RoID0gdGhpcy5fc3lzZXhCdWZmZXIubGVuZ3RoO1xuICAgICAgICBjb25zdCB0bXBCdWZmZXIgPSBuZXcgVWludDhBcnJheShvbGRMZW5ndGggKyBkYXRhLmxlbmd0aCk7XG4gICAgICAgIHRtcEJ1ZmZlci5zZXQodGhpcy5fc3lzZXhCdWZmZXIpO1xuICAgICAgICB0bXBCdWZmZXIuc2V0KGRhdGEsIG9sZExlbmd0aCk7XG4gICAgICAgIHRoaXMuX3N5c2V4QnVmZmVyID0gdG1wQnVmZmVyO1xuICAgIH1cblxuICAgIF9idWZmZXJMb25nU3lzZXgoZGF0YSwgaW5pdGlhbE9mZnNldCkge1xuICAgICAgICBsZXQgaiA9IGluaXRpYWxPZmZzZXQ7XG4gICAgICAgIHdoaWxlIChqIDwgZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChkYXRhW2pdID09IDB4RjcpIHtcbiAgICAgICAgICAgICAgICAvLyBlbmQgb2Ygc3lzZXghXG4gICAgICAgICAgICAgICAgaiArPSAxO1xuICAgICAgICAgICAgICAgIHRoaXMuX2FwcGVuZFRvU3lzZXhCdWZmZXIoZGF0YS5zbGljZShpbml0aWFsT2Zmc2V0LCBqKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGo7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBqICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZGlkbid0IHJlYWNoIHRoZSBlbmQ7IGp1c3QgdGFjayBpdCBvbi5cbiAgICAgICAgdGhpcy5fYXBwZW5kVG9TeXNleEJ1ZmZlcihkYXRhLnNsaWNlKGluaXRpYWxPZmZzZXQsIGopKTtcbiAgICAgICAgdGhpcy5faW5Mb25nU3lzZXhNZXNzYWdlID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGo7XG4gICAgfVxufVxuXG5cbm1pZGlQcm9jID0gZnVuY3Rpb24gKHRpbWVzdGFtcCwgZGF0YSkge1xuICAgIGxldCBsZW5ndGggPSAwO1xuICAgIGxldCBpO1xuICAgIGxldCBpc1N5c2V4TWVzc2FnZSA9IGZhbHNlO1xuXG4gICAgLy8gSmF6eiBzb21ldGltZXMgcGFzc2VzIHVzIG11bHRpcGxlIG1lc3NhZ2VzIGF0IG9uY2UsIHNvIHdlIG5lZWQgdG8gcGFyc2UgdGhlbSBvdXQgYW5kIHBhc3MgdGhlbSBvbmUgYXQgYSB0aW1lLlxuXG4gICAgZm9yIChpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpICs9IGxlbmd0aCkge1xuICAgICAgICBsZXQgaXNWYWxpZE1lc3NhZ2UgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5faW5Mb25nU3lzZXhNZXNzYWdlKSB7XG4gICAgICAgICAgICBpID0gdGhpcy5fYnVmZmVyTG9uZ1N5c2V4KGRhdGEsIGkpO1xuICAgICAgICAgICAgaWYgKGRhdGFbaSAtIDFdICE9IDB4ZjcpIHtcbiAgICAgICAgICAgICAgICAvLyByYW4gb2ZmIHRoZSBlbmQgd2l0aG91dCBoaXR0aW5nIHRoZSBlbmQgb2YgdGhlIHN5c2V4IG1lc3NhZ2VcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpc1N5c2V4TWVzc2FnZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpc1N5c2V4TWVzc2FnZSA9IGZhbHNlO1xuICAgICAgICAgICAgc3dpdGNoIChkYXRhW2ldICYgMHhGMCkge1xuICAgICAgICAgICAgY2FzZSAweDAwOiAvLyBDaGV3IHVwIHNwdXJpb3VzIDB4MDAgYnl0ZXMuICBGaXhlcyBhIFdpbmRvd3MgcHJvYmxlbS5cbiAgICAgICAgICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgICAgICAgICAgIGlzVmFsaWRNZXNzYWdlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMHg4MDogLy8gbm90ZSBvZmZcbiAgICAgICAgICAgIGNhc2UgMHg5MDogLy8gbm90ZSBvblxuICAgICAgICAgICAgY2FzZSAweEEwOiAvLyBwb2x5cGhvbmljIGFmdGVydG91Y2hcbiAgICAgICAgICAgIGNhc2UgMHhCMDogLy8gY29udHJvbCBjaGFuZ2VcbiAgICAgICAgICAgIGNhc2UgMHhFMDogLy8gY2hhbm5lbCBtb2RlXG4gICAgICAgICAgICAgICAgbGVuZ3RoID0gMztcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAweEMwOiAvLyBwcm9ncmFtIGNoYW5nZVxuICAgICAgICAgICAgY2FzZSAweEQwOiAvLyBjaGFubmVsIGFmdGVydG91Y2hcbiAgICAgICAgICAgICAgICBsZW5ndGggPSAyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDB4RjA6XG4gICAgICAgICAgICAgICAgc3dpdGNoIChkYXRhW2ldKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAweGYwOiAvLyBsZXRpYWJsZS1sZW5ndGggc3lzZXguXG4gICAgICAgICAgICAgICAgICAgIGkgPSB0aGlzLl9idWZmZXJMb25nU3lzZXgoZGF0YSwgaSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhW2kgLSAxXSAhPSAweGY3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByYW4gb2ZmIHRoZSBlbmQgd2l0aG91dCBoaXR0aW5nIHRoZSBlbmQgb2YgdGhlIHN5c2V4IG1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpc1N5c2V4TWVzc2FnZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAweEYxOiAvLyBNVEMgcXVhcnRlciBmcmFtZVxuICAgICAgICAgICAgICAgIGNhc2UgMHhGMzogLy8gc29uZyBzZWxlY3RcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoID0gMjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDB4RjI6IC8vIHNvbmcgcG9zaXRpb24gcG9pbnRlclxuICAgICAgICAgICAgICAgICAgICBsZW5ndGggPSAzO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVmFsaWRNZXNzYWdlKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGV2dCA9IHt9O1xuICAgICAgICBldnQucmVjZWl2ZWRUaW1lID0gcGFyc2VGbG9hdCh0aW1lc3RhbXAudG9TdHJpbmcoKSkgKyB0aGlzLl9qYXp6SW5zdGFuY2UuX3BlcmZUaW1lWmVybztcblxuICAgICAgICBpZiAoaXNTeXNleE1lc3NhZ2UgfHwgdGhpcy5faW5Mb25nU3lzZXhNZXNzYWdlKSB7XG4gICAgICAgICAgICBldnQuZGF0YSA9IG5ldyBVaW50OEFycmF5KHRoaXMuX3N5c2V4QnVmZmVyKTtcbiAgICAgICAgICAgIHRoaXMuX3N5c2V4QnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoMCk7XG4gICAgICAgICAgICB0aGlzLl9pbkxvbmdTeXNleE1lc3NhZ2UgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGV2dC5kYXRhID0gbmV3IFVpbnQ4QXJyYXkoZGF0YS5zbGljZShpLCBsZW5ndGggKyBpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobm9kZWpzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fb25taWRpbWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX29ubWlkaW1lc3NhZ2UoZXZ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSBuZXcgTUlESU1lc3NhZ2VFdmVudCh0aGlzLCBldnQuZGF0YSwgZXZ0LnJlY2VpdmVkVGltZSk7XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuIiwiLyogZXNsaW50IHByZWZlci1kZXN0cnVjdHVyaW5nOiAwICovXG4vKiBlc2xpbnQgbm8tdW5kZXJzY29yZS1kYW5nbGU6IDAgKi9cblxuLypcbiAgTUlESU91dHB1dCBpcyBhIHdyYXBwZXIgYXJvdW5kIGFuIG91dHB1dCBvZiBhIEphenogaW5zdGFuY2VcbiovXG5pbXBvcnQgeyBnZXREZXZpY2UgfSBmcm9tICcuLi91dGlsL3V0aWwnO1xuaW1wb3J0IFN0b3JlIGZyb20gJy4uL3V0aWwvc3RvcmUnO1xuaW1wb3J0IHsgZGlzcGF0Y2hFdmVudCwgZ2V0TUlESURldmljZUlkIH0gZnJvbSAnLi9taWRpX2FjY2Vzcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1JRElPdXRwdXQge1xuICAgIGNvbnN0cnVjdG9yKGluZm8sIGluc3RhbmNlKSB7XG4gICAgICAgIHRoaXMuaWQgPSBnZXRNSURJRGV2aWNlSWQoaW5mb1swXSwgJ291dHB1dCcpO1xuICAgICAgICB0aGlzLm5hbWUgPSBpbmZvWzBdO1xuICAgICAgICB0aGlzLm1hbnVmYWN0dXJlciA9IGluZm9bMV07XG4gICAgICAgIHRoaXMudmVyc2lvbiA9IGluZm9bMl07XG4gICAgICAgIHRoaXMudHlwZSA9ICdvdXRwdXQnO1xuICAgICAgICB0aGlzLnN0YXRlID0gJ2Nvbm5lY3RlZCc7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbiA9ICdwZW5kaW5nJztcbiAgICAgICAgdGhpcy5vbm1pZGltZXNzYWdlID0gbnVsbDtcbiAgICAgICAgdGhpcy5vbnN0YXRlY2hhbmdlID0gbnVsbDtcblxuICAgICAgICB0aGlzLl9saXN0ZW5lcnMgPSBuZXcgU3RvcmUoKTtcbiAgICAgICAgdGhpcy5faW5Mb25nU3lzZXhNZXNzYWdlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3N5c2V4QnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoKTtcblxuICAgICAgICB0aGlzLl9qYXp6SW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICAgICAgdGhpcy5famF6ekluc3RhbmNlLm91dHB1dEluVXNlID0gdHJ1ZTtcbiAgICAgICAgaWYgKGdldERldmljZSgpLnBsYXRmb3JtID09PSAnbGludXgnKSB7XG4gICAgICAgICAgICB0aGlzLl9qYXp6SW5zdGFuY2UuTWlkaU91dE9wZW4odGhpcy5uYW1lKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9wZW4oKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3Rpb24gPT09ICdvcGVuJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChnZXREZXZpY2UoKS5wbGF0Zm9ybSAhPT0gJ2xpbnV4Jykge1xuICAgICAgICAgICAgdGhpcy5famF6ekluc3RhbmNlLk1pZGlPdXRPcGVuKHRoaXMubmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gJ29wZW4nO1xuICAgICAgICBkaXNwYXRjaEV2ZW50KHRoaXMpOyAvLyBkaXNwYXRjaCBNSURJQ29ubmVjdGlvbkV2ZW50IHZpYSBNSURJQWNjZXNzXG4gICAgfVxuXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3Rpb24gPT09ICdjbG9zZWQnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdldERldmljZSgpLnBsYXRmb3JtICE9PSAnbGludXgnKSB7XG4gICAgICAgICAgICB0aGlzLl9qYXp6SW5zdGFuY2UuTWlkaU91dENsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gJ2Nsb3NlZCc7XG4gICAgICAgIGRpc3BhdGNoRXZlbnQodGhpcyk7IC8vIGRpc3BhdGNoIE1JRElDb25uZWN0aW9uRXZlbnQgdmlhIE1JRElBY2Nlc3NcbiAgICAgICAgdGhpcy5vbnN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzLmNsZWFyKCk7XG4gICAgfVxuXG4gICAgc2VuZChkYXRhLCB0aW1lc3RhbXApIHtcbiAgICAgICAgbGV0IGRlbGF5QmVmb3JlU2VuZCA9IDA7XG5cbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGltZXN0YW1wKSB7XG4gICAgICAgICAgICBkZWxheUJlZm9yZVNlbmQgPSBNYXRoLmZsb29yKHRpbWVzdGFtcCAtIHBlcmZvcm1hbmNlLm5vdygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aW1lc3RhbXAgJiYgKGRlbGF5QmVmb3JlU2VuZCA+IDEpKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9qYXp6SW5zdGFuY2UuTWlkaU91dExvbmcoZGF0YSk7XG4gICAgICAgICAgICB9LCBkZWxheUJlZm9yZVNlbmQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5famF6ekluc3RhbmNlLk1pZGlPdXRMb25nKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGNsZWFyKCkge1xuICAgICAgICAvLyB0byBiZSBpbXBsZW1lbnRlZFxuICAgIH1cblxuICAgIGFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIHVzZUNhcHR1cmUpIHtcbiAgICAgICAgaWYgKHR5cGUgIT09ICdzdGF0ZWNoYW5nZScpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9saXN0ZW5lcnMuaGFzKGxpc3RlbmVyKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX2xpc3RlbmVycy5hZGQobGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgdXNlQ2FwdHVyZSkge1xuICAgICAgICBpZiAodHlwZSAhPT0gJ3N0YXRlY2hhbmdlJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2xpc3RlbmVycy5oYXMobGlzdGVuZXIpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkaXNwYXRjaEV2ZW50KGV2dCkge1xuICAgICAgICB0aGlzLl9saXN0ZW5lcnMuZm9yRWFjaCgobGlzdGVuZXIpID0+IHtcbiAgICAgICAgICAgIGxpc3RlbmVyKGV2dCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLm9uc3RhdGVjaGFuZ2UgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMub25zdGF0ZWNoYW5nZShldnQpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNSURJQ29ubmVjdGlvbkV2ZW50IHtcbiAgICBjb25zdHJ1Y3RvcihtaWRpQWNjZXNzLCBwb3J0KSB7XG4gICAgICAgIHRoaXMuYnViYmxlcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNhbmNlbEJ1YmJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNhbmNlbGFibGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jdXJyZW50VGFyZ2V0ID0gbWlkaUFjY2VzcztcbiAgICAgICAgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZXZlbnRQaGFzZSA9IDA7XG4gICAgICAgIHRoaXMucGF0aCA9IFtdO1xuICAgICAgICB0aGlzLnBvcnQgPSBwb3J0O1xuICAgICAgICB0aGlzLnJldHVyblZhbHVlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zcmNFbGVtZW50ID0gbWlkaUFjY2VzcztcbiAgICAgICAgdGhpcy50YXJnZXQgPSBtaWRpQWNjZXNzO1xuICAgICAgICB0aGlzLnRpbWVTdGFtcCA9IERhdGUubm93KCk7XG4gICAgICAgIHRoaXMudHlwZSA9ICdzdGF0ZWNoYW5nZSc7XG4gICAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTUlESU1lc3NhZ2VFdmVudCB7XG4gICAgY29uc3RydWN0b3IocG9ydCwgZGF0YSwgcmVjZWl2ZWRUaW1lKSB7XG4gICAgICAgIHRoaXMuYnViYmxlcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNhbmNlbEJ1YmJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNhbmNlbGFibGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jdXJyZW50VGFyZ2V0ID0gcG9ydDtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZXZlbnRQaGFzZSA9IDA7XG4gICAgICAgIHRoaXMucGF0aCA9IFtdO1xuICAgICAgICB0aGlzLnJlY2VpdmVkVGltZSA9IHJlY2VpdmVkVGltZTtcbiAgICAgICAgdGhpcy5yZXR1cm5WYWx1ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuc3JjRWxlbWVudCA9IHBvcnQ7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gcG9ydDtcbiAgICAgICAgdGhpcy50aW1lU3RhbXAgPSBEYXRlLm5vdygpO1xuICAgICAgICB0aGlzLnR5cGUgPSAnbWlkaW1lc3NhZ2UnO1xuICAgIH1cbn1cbiIsIi8qIGVzbGludCBuby11bmRlcnNjb3JlLWRhbmdsZTogMCAqL1xuXG4vKlxuICBDcmVhdGVzIGluc3RhbmNlcyBvZiB0aGUgSmF6eiBwbHVnaW4gaWYgbmVjZXNzYXJ5LiBJbml0aWFsbHkgdGhlIE1JRElBY2Nlc3MgY3JlYXRlcyBvbmUgbWFpbiBKYXp6IGluc3RhbmNlIHRoYXQgaXMgdXNlZFxuICB0byBxdWVyeSBhbGwgaW5pdGlhbGx5IGNvbm5lY3RlZCBkZXZpY2VzLCBhbmQgdG8gdHJhY2sgdGhlIGRldmljZXMgdGhhdCBhcmUgYmVpbmcgY29ubmVjdGVkIG9yIGRpc2Nvbm5lY3RlZCBhdCBydW50aW1lLlxuXG4gIEZvciBldmVyeSBNSURJSW5wdXQgYW5kIE1JRElPdXRwdXQgdGhhdCBpcyBjcmVhdGVkLCBNSURJQWNjZXNzIHF1ZXJpZXMgdGhlIGdldEphenpJbnN0YW5jZSgpIG1ldGhvZCBmb3IgYSBKYXp6IGluc3RhbmNlXG4gIHRoYXQgc3RpbGwgaGF2ZSBhbiBhdmFpbGFibGUgaW5wdXQgb3Igb3V0cHV0LiBCZWNhdXNlIEphenogb25seSBhbGxvd3Mgb25lIGlucHV0IGFuZCBvbmUgb3V0cHV0IHBlciBpbnN0YW5jZSwgd2VcbiAgbmVlZCB0byBjcmVhdGUgbmV3IGluc3RhbmNlcyBpZiBtb3JlIHRoYW4gb25lIE1JREkgaW5wdXQgb3Igb3V0cHV0IGRldmljZSBnZXRzIGNvbm5lY3RlZC5cblxuICBOb3RlIHRoYXQgYW4gZXhpc3RpbmcgSmF6eiBpbnN0YW5jZSBkb2Vzbid0IGdldCBkZWxldGVkIHdoZW4gYm90aCBpdHMgaW5wdXQgYW5kIG91dHB1dCBkZXZpY2UgYXJlIGRpc2Nvbm5lY3RlZDsgaW5zdGVhZCBpdFxuICB3aWxsIGJlIHJldXNlZCBpZiBhIG5ldyBkZXZpY2UgZ2V0cyBjb25uZWN0ZWQuXG4qL1xuXG5pbXBvcnQgU3RvcmUgZnJvbSAnLi9zdG9yZSc7XG5pbXBvcnQgeyBnZXREZXZpY2UgfSBmcm9tICcuL3V0aWwnO1xuXG5jb25zdCBqYXp6UGx1Z2luSW5pdFRpbWUgPSAxMDA7IC8vIG1pbGxpc2Vjb25kc1xuXG5sZXQgamF6ekluc3RhbmNlTnVtYmVyID0gMDtcbmNvbnN0IGphenpJbnN0YW5jZXMgPSBuZXcgU3RvcmUoKTtcblxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSmF6ekluc3RhbmNlKGNhbGxiYWNrKSB7XG4gICAgY29uc3QgaWQgPSBgamF6el8ke2phenpJbnN0YW5jZU51bWJlcn1fJHtEYXRlLm5vdygpfWA7XG4gICAgamF6ekluc3RhbmNlTnVtYmVyICs9IDE7XG4gICAgbGV0IG9ialJlZjtcbiAgICBsZXQgYWN0aXZlWDtcblxuICAgIGlmIChnZXREZXZpY2UoKS5ub2RlanMgPT09IHRydWUpIHtcbiAgICAgICAgLy8gamF6ek1pZGkgaXMgYWRkZWQgdG8gdGhlIGdsb2JhbCB2YXIgbmF2aWdhdG9yIGluIHRoZSBub2RlIGVudmlyb25tZW50XG4gICAgICAgIG9ialJlZiA9IG5ldyBuYXZpZ2F0b3IuamF6ek1pZGkuTUlESSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8qXG4gICAgICAgICAgICBnZW5lcmF0ZSB0aGlzIGh0bWw6XG5cbiAgICAgICAgICAgIDxvYmplY3QgaWQ9XCJKYXp6MVwiIGNsYXNzaWQ9XCJDTFNJRDoxQUNFMTYxOC0xQzdELTQ1NjEtQUVFMS0zNDg0MkFBODVFOTBcIiBjbGFzcz1cImhpZGRlblwiPlxuICAgICAgICAgICAgICAgIDxvYmplY3QgaWQ9XCJKYXp6MlwiIHR5cGU9XCJhdWRpby94LWphenpcIiBjbGFzcz1cImhpZGRlblwiPlxuICAgICAgICAgICAgICAgICAgICA8cCBzdHlsZT1cInZpc2liaWxpdHk6dmlzaWJsZTtcIj5UaGlzIHBhZ2UgcmVxdWlyZXMgPGEgaHJlZj1odHRwOi8vamF6ei1zb2Z0Lm5ldD5KYXp6LVBsdWdpbjwvYT4gLi4uPC9wPlxuICAgICAgICAgICAgICAgIDwvb2JqZWN0PlxuICAgICAgICAgICAgPC9vYmplY3Q+XG4gICAgICAgICovXG5cbiAgICAgICAgYWN0aXZlWCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29iamVjdCcpO1xuICAgICAgICBhY3RpdmVYLmlkID0gYCR7aWR9aWVgO1xuICAgICAgICBhY3RpdmVYLmNsYXNzaWQgPSAnQ0xTSUQ6MUFDRTE2MTgtMUM3RC00NTYxLUFFRTEtMzQ4NDJBQTg1RTkwJztcblxuICAgICAgICBvYmpSZWYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvYmplY3QnKTtcbiAgICAgICAgb2JqUmVmLmlkID0gaWQ7XG4gICAgICAgIG9ialJlZi50eXBlID0gJ2F1ZGlvL3gtamF6eic7XG5cbiAgICAgICAgYWN0aXZlWC5hcHBlbmRDaGlsZChvYmpSZWYpO1xuXG4gICAgICAgIGNvbnN0IHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICAgIHAuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJ1RoaXMgcGFnZSByZXF1aXJlcyB0aGUgJykpO1xuXG4gICAgICAgIGNvbnN0IGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgIGEuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJ0phenogcGx1Z2luJykpO1xuICAgICAgICBhLmhyZWYgPSAnaHR0cDovL2phenotc29mdC5uZXQvJztcblxuICAgICAgICBwLmFwcGVuZENoaWxkKGEpO1xuICAgICAgICBwLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcuJykpO1xuXG4gICAgICAgIG9ialJlZi5hcHBlbmRDaGlsZChwKTtcblxuICAgICAgICBsZXQgaW5zZXJ0aW9uUG9pbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnTUlESVBsdWdpbicpO1xuICAgICAgICBpZiAoIWluc2VydGlvblBvaW50KSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgaGlkZGVuIGVsZW1lbnRcbiAgICAgICAgICAgIGluc2VydGlvblBvaW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBpbnNlcnRpb25Qb2ludC5pZCA9ICdNSURJUGx1Z2luJztcbiAgICAgICAgICAgIGluc2VydGlvblBvaW50LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgICAgICAgIGluc2VydGlvblBvaW50LnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICAgICAgICAgIGluc2VydGlvblBvaW50LnN0eWxlLmxlZnQgPSAnLTk5OTlweCc7XG4gICAgICAgICAgICBpbnNlcnRpb25Qb2ludC5zdHlsZS50b3AgPSAnLTk5OTlweCc7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGluc2VydGlvblBvaW50KTtcbiAgICAgICAgfVxuICAgICAgICBpbnNlcnRpb25Qb2ludC5hcHBlbmRDaGlsZChhY3RpdmVYKTtcbiAgICB9XG5cblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBsZXQgaW5zdGFuY2UgPSBudWxsO1xuICAgICAgICBpZiAob2JqUmVmLmlzSmF6eiA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaW5zdGFuY2UgPSBvYmpSZWY7XG4gICAgICAgIH0gZWxzZSBpZiAoYWN0aXZlWC5pc0phenogPT09IHRydWUpIHtcbiAgICAgICAgICAgIGluc3RhbmNlID0gYWN0aXZlWDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5zdGFuY2UgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGluc3RhbmNlLl9wZXJmVGltZVplcm8gPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgICAgIGphenpJbnN0YW5jZXMuc2V0KGphenpJbnN0YW5jZU51bWJlciwgaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgICAgIGNhbGxiYWNrKGluc3RhbmNlKTtcbiAgICB9LCBqYXp6UGx1Z2luSW5pdFRpbWUpO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRKYXp6SW5zdGFuY2UodHlwZSwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBrZXkgPSB0eXBlID09PSAnaW5wdXQnID8gJ2lucHV0SW5Vc2UnIDogJ291dHB1dEluVXNlJztcbiAgICBsZXQgaW5zdGFuY2UgPSBudWxsO1xuXG4gICAgY29uc3QgdmFsdWVzID0gamF6ekluc3RhbmNlcy52YWx1ZXMoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBpbnN0ID0gdmFsdWVzW2ldO1xuICAgICAgICBpZiAoaW5zdFtrZXldICE9PSB0cnVlKSB7XG4gICAgICAgICAgICBpbnN0YW5jZSA9IGluc3Q7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpbnN0YW5jZSA9PT0gbnVsbCkge1xuICAgICAgICBjcmVhdGVKYXp6SW5zdGFuY2UoY2FsbGJhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrKGluc3RhbmNlKTtcbiAgICB9XG59XG4iLCJsZXQgaWRJbmRleCA9IDA7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0b3JlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5zdG9yZSA9IHt9O1xuICAgICAgICB0aGlzLmtleXMgPSBbXTtcbiAgICB9XG4gICAgYWRkKG9iaikge1xuICAgICAgICBjb25zdCBpZCA9IGAke25ldyBEYXRlKCkuZ2V0VGltZSgpfSR7aWRJbmRleH1gO1xuICAgICAgICBpZEluZGV4ICs9IDE7XG4gICAgICAgIHRoaXMua2V5cy5wdXNoKGlkKTtcbiAgICAgICAgdGhpcy5zdG9yZVtpZF0gPSBvYmo7XG4gICAgfVxuICAgIHNldChpZCwgb2JqKSB7XG4gICAgICAgIHRoaXMua2V5cy5wdXNoKGlkKTtcbiAgICAgICAgdGhpcy5zdG9yZVtpZF0gPSBvYmo7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBnZXQoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmVbaWRdO1xuICAgIH1cbiAgICBoYXMoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMua2V5cy5pbmRleE9mKGlkKSAhPT0gLTE7XG4gICAgfVxuICAgIGRlbGV0ZShpZCkge1xuICAgICAgICBkZWxldGUgdGhpcy5zdG9yZVtpZF07XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5rZXlzLmluZGV4T2YoaWQpO1xuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgdGhpcy5rZXlzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHZhbHVlcygpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudHMgPSBbXTtcbiAgICAgICAgY29uc3QgbCA9IHRoaXMua2V5cy5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSArPSAxKSB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5zdG9yZVt0aGlzLmtleXNbaV1dO1xuICAgICAgICAgICAgZWxlbWVudHMucHVzaChlbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZWxlbWVudHM7XG4gICAgfVxuICAgIGZvckVhY2goY2IpIHtcbiAgICAgICAgY29uc3QgbCA9IHRoaXMua2V5cy5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSArPSAxKSB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5zdG9yZVt0aGlzLmtleXNbaV1dO1xuICAgICAgICAgICAgY2IoZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMua2V5cyA9IFtdO1xuICAgICAgICB0aGlzLnN0b3JlID0ge307XG4gICAgfVxufVxuIiwiLyogZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOiAwICovXG4vKiBlc2xpbnQgbm8tYml0d2lzZTogMCAqL1xuLyogZXNsaW50IG5vLW1peGVkLW9wZXJhdG9yczogMCAqL1xuXG5cbmxldCBTY29wZTtcbmxldCBkZXZpY2UgPSBudWxsO1xuXG5jb25zdCBnZXRTY29wZSA9ICgpID0+IHtcbiAgICBpZiAodHlwZW9mIFNjb3BlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gU2NvcGU7XG4gICAgfVxuICAgIFNjb3BlID0gbnVsbDtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgU2NvcGUgPSB3aW5kb3c7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBTY29wZSA9IGdsb2JhbDtcbiAgICB9XG4gICAgLy8gY29uc29sZS5sb2coJ3Njb3BlJywgc2NvcGUpO1xuICAgIHJldHVybiBTY29wZTtcbn07XG5cblxuLy8gY2hlY2sgb24gd2hhdCB0eXBlIG9mIGRldmljZSB3ZSBhcmUgcnVubmluZywgbm90ZSB0aGF0IGluIHRoaXMgY29udGV4dFxuLy8gYSBkZXZpY2UgaXMgYSBjb21wdXRlciBub3QgYSBNSURJIGRldmljZVxuZXhwb3J0IGZ1bmN0aW9uIGdldERldmljZSgpIHtcbiAgICBjb25zdCBzY29wZSA9IGdldFNjb3BlKCk7XG4gICAgaWYgKGRldmljZSAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZGV2aWNlO1xuICAgIH1cblxuICAgIGxldCBwbGF0Zm9ybSA9ICd1bmRldGVjdGVkJztcbiAgICBsZXQgYnJvd3NlciA9ICd1bmRldGVjdGVkJztcblxuICAgIGlmIChzY29wZS5uYXZpZ2F0b3Iubm9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICBkZXZpY2UgPSB7XG4gICAgICAgICAgICBwbGF0Zm9ybTogcHJvY2Vzcy5wbGF0Zm9ybSxcbiAgICAgICAgICAgIG5vZGVqczogdHJ1ZSxcbiAgICAgICAgICAgIG1vYmlsZTogcGxhdGZvcm0gPT09ICdpb3MnIHx8IHBsYXRmb3JtID09PSAnYW5kcm9pZCcsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBkZXZpY2U7XG4gICAgfVxuXG4gICAgY29uc3QgdWEgPSBzY29wZS5uYXZpZ2F0b3IudXNlckFnZW50O1xuXG4gICAgaWYgKHVhLm1hdGNoKC8oaVBhZHxpUGhvbmV8aVBvZCkvZykpIHtcbiAgICAgICAgcGxhdGZvcm0gPSAnaW9zJztcbiAgICB9IGVsc2UgaWYgKHVhLmluZGV4T2YoJ0FuZHJvaWQnKSAhPT0gLTEpIHtcbiAgICAgICAgcGxhdGZvcm0gPSAnYW5kcm9pZCc7XG4gICAgfSBlbHNlIGlmICh1YS5pbmRleE9mKCdMaW51eCcpICE9PSAtMSkge1xuICAgICAgICBwbGF0Zm9ybSA9ICdsaW51eCc7XG4gICAgfSBlbHNlIGlmICh1YS5pbmRleE9mKCdNYWNpbnRvc2gnKSAhPT0gLTEpIHtcbiAgICAgICAgcGxhdGZvcm0gPSAnb3N4JztcbiAgICB9IGVsc2UgaWYgKHVhLmluZGV4T2YoJ1dpbmRvd3MnKSAhPT0gLTEpIHtcbiAgICAgICAgcGxhdGZvcm0gPSAnd2luZG93cyc7XG4gICAgfVxuXG4gICAgaWYgKHVhLmluZGV4T2YoJ0Nocm9tZScpICE9PSAtMSkge1xuICAgICAgICAvLyBjaHJvbWUsIGNocm9taXVtIGFuZCBjYW5hcnlcbiAgICAgICAgYnJvd3NlciA9ICdjaHJvbWUnO1xuXG4gICAgICAgIGlmICh1YS5pbmRleE9mKCdPUFInKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGJyb3dzZXIgPSAnb3BlcmEnO1xuICAgICAgICB9IGVsc2UgaWYgKHVhLmluZGV4T2YoJ0Nocm9taXVtJykgIT09IC0xKSB7XG4gICAgICAgICAgICBicm93c2VyID0gJ2Nocm9taXVtJztcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAodWEuaW5kZXhPZignU2FmYXJpJykgIT09IC0xKSB7XG4gICAgICAgIGJyb3dzZXIgPSAnc2FmYXJpJztcbiAgICB9IGVsc2UgaWYgKHVhLmluZGV4T2YoJ0ZpcmVmb3gnKSAhPT0gLTEpIHtcbiAgICAgICAgYnJvd3NlciA9ICdmaXJlZm94JztcbiAgICB9IGVsc2UgaWYgKHVhLmluZGV4T2YoJ1RyaWRlbnQnKSAhPT0gLTEpIHtcbiAgICAgICAgYnJvd3NlciA9ICdpZSc7XG4gICAgICAgIGlmICh1YS5pbmRleE9mKCdNU0lFIDknKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGJyb3dzZXIgPSAnaWU5JztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwbGF0Zm9ybSA9PT0gJ2lvcycpIHtcbiAgICAgICAgaWYgKHVhLmluZGV4T2YoJ0NyaU9TJykgIT09IC0xKSB7XG4gICAgICAgICAgICBicm93c2VyID0gJ2Nocm9tZSc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXZpY2UgPSB7XG4gICAgICAgIHBsYXRmb3JtLFxuICAgICAgICBicm93c2VyLFxuICAgICAgICBtb2JpbGU6IHBsYXRmb3JtID09PSAnaW9zJyB8fCBwbGF0Zm9ybSA9PT0gJ2FuZHJvaWQnLFxuICAgICAgICBub2RlanM6IGZhbHNlLFxuICAgIH07XG4gICAgcmV0dXJuIGRldmljZTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gcG9seWZpbGxQZXJmb3JtYW5jZSgpIHtcbiAgICBjb25zdCBzY29wZSA9IGdldFNjb3BlKCk7XG4gICAgaWYgKHR5cGVvZiBzY29wZS5wZXJmb3JtYW5jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc2NvcGUucGVyZm9ybWFuY2UgPSB7fTtcbiAgICB9XG4gICAgRGF0ZS5ub3cgPSBEYXRlLm5vdyB8fCAoKCkgPT4gbmV3IERhdGUoKS5nZXRUaW1lKCkpO1xuXG4gICAgaWYgKHR5cGVvZiBzY29wZS5wZXJmb3JtYW5jZS5ub3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGxldCBub3dPZmZzZXQgPSBEYXRlLm5vdygpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0eXBlb2Ygc2NvcGUucGVyZm9ybWFuY2UudGltaW5nICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgdHlwZW9mIHNjb3BlLnBlcmZvcm1hbmNlLnRpbWluZy5uYXZpZ2F0aW9uU3RhcnQgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICkge1xuICAgICAgICAgICAgbm93T2Zmc2V0ID0gc2NvcGUucGVyZm9ybWFuY2UudGltaW5nLm5hdmlnYXRpb25TdGFydDtcbiAgICAgICAgfVxuICAgICAgICBzY29wZS5wZXJmb3JtYW5jZS5ub3cgPSBmdW5jdGlvbiBub3coKSB7XG4gICAgICAgICAgICByZXR1cm4gRGF0ZS5ub3coKSAtIG5vd09mZnNldDtcbiAgICAgICAgfTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlVVVJRCgpIHtcbiAgICBsZXQgZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIGxldCB1dWlkID0gbmV3IEFycmF5KDY0KS5qb2luKCd4Jyk7Ly8gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCc7XG4gICAgdXVpZCA9IHV1aWQucmVwbGFjZSgvW3h5XS9nLCAoYykgPT4ge1xuICAgICAgICBjb25zdCByID0gKGQgKyBNYXRoLnJhbmRvbSgpICogMTYpICUgMTYgfCAwO1xuICAgICAgICBkID0gTWF0aC5mbG9vcihkIC8gMTYpO1xuICAgICAgICByZXR1cm4gKGMgPT09ICd4JyA/IHIgOiAociAmIDB4MyB8IDB4OCkpLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuICAgIH0pO1xuICAgIHJldHVybiB1dWlkO1xufVxuXG5cbi8vIGEgdmVyeSBzaW1wbGUgaW1wbGVtZW50YXRpb24gb2YgYSBQcm9taXNlIGZvciBJbnRlcm5ldCBFeHBsb3JlciBhbmQgTm9kZWpzXG5leHBvcnQgZnVuY3Rpb24gcG9seWZpbGxQcm9taXNlKCkge1xuICAgIGNvbnN0IHNjb3BlID0gZ2V0U2NvcGUoKTtcbiAgICBpZiAodHlwZW9mIHNjb3BlLlByb21pc2UgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgc2NvcGUuUHJvbWlzZSA9IGZ1bmN0aW9uIHByb21pc2UoZXhlY3V0b3IpIHtcbiAgICAgICAgICAgIHRoaXMuZXhlY3V0b3IgPSBleGVjdXRvcjtcbiAgICAgICAgfTtcblxuICAgICAgICBzY29wZS5Qcm9taXNlLnByb3RvdHlwZS50aGVuID0gZnVuY3Rpb24gdGhlbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzb2x2ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHJlc29sdmUgPSAoKSA9PiB7IH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlamVjdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHJlamVjdCA9ICgpID0+IHsgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZXhlY3V0b3IocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHBvbHlmaWxsKCkge1xuICAgIGNvbnN0IGQgPSBnZXREZXZpY2UoKTtcbiAgICAvLyBjb25zb2xlLmxvZyhkZXZpY2UpO1xuICAgIGlmIChkLmJyb3dzZXIgPT09ICdpZScgfHwgZC5ub2RlanMgPT09IHRydWUpIHtcbiAgICAgICAgcG9seWZpbGxQcm9taXNlKCk7XG4gICAgfVxuICAgIHBvbHlmaWxsUGVyZm9ybWFuY2UoKTtcbn1cbiJdfQ==\n"],"file":"WebMIDIAPI.min.js"}